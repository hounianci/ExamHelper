操作系统的两个主要目标：
1.与硬件部分相互作用，为包含在硬件平台上的所有底层可编程部件提供服务。
2.为运行在计算机系统上的应用程序提供执行环境。

操作系统管理的资源主要包括：
处理机、内存、设备 、文件、网卡、带宽

操作系统的主要功能：
1.处理机管理：使多个程序共享处理机。
2.内存管理：分配和回收内存，完成逻辑地址到物理地址的转换。
3.设备管理：接受用户的I/O请求、为用户分配I/O设备、管理I/O缓存和驱动I/O设备。
4.文件管理：完成外存空间的分配、回收、文件的按名存取、文件的组织、共享和保护功能。

操作系统发展过程：
无操作系统、单道批处理系统、多道程序系统。

单道批处理系统的特点：
系统内存中只有一道作业，自动成批处理作业。自动行、顺序性、单道性。

多道批处理系统特点：
用户所提交的作业都先存放在外存中的队列，称为“后备作业队列”。多道性、无序性、调度性、复杂性。

分时系统的特点：
允许多个用户通过终端同时使用计算机。多路性、独立性、及时性、交互性。

实时系统的特点：
多路性、独立性、及时性、交互性、可靠性。

分时系统需要解决的关键问题：
及时接收、及时处理

主机操作系统提供的三类服务：
批处理、事务处理、分时处理

现代操作系统的特征：
并发、共享、虚拟、异步性

内存管理具有的功能：
内存分配、内存保护、地址映射、内存扩充

内存保护的任务：
1.使操作系统内核的空间不会被用户随意访问，保证系统的安全和稳定。
2.确保每道用户程序都在自己的内存空间中运行，互不干扰。

逻辑上扩充内存需要的功能：
请求调入功能、置换功能

进程管理功能包括：
进程的描述与组织、进程控制、进程同步、进程通信、进程调度

设备管理应该具有的功能：
1.缓存管理
2.设备分配
3.设备处理
4.设备独立性和虚拟设备

操作系统层次结构的思想：
将操作系统分解为多个小的、容易理解的层，系统功能被隔离在不同层中，每一层提供对系统功能的
部分抽象，然后采用单向调用的顺序，形成一连串彼此连续的对系统功能的“抽象串”，最终形成对
整个系统的完整抽象。

微内核结构用一个水平分层的结构代替传统的纵向分层结构的好处：
1.操作系统可以方便地增加或删除服务功能，系统具有很好的灵活性。
2.服务器进程运行在独立的用户进程空间中，可控性好。
3.微内核体积小，便于测试、管理和维护。
4.微内核技术实现了基于客户/服务器体系结构的操作系统，适宜于网络环境及分布式计算模型。

处理器解释指令并执行要求的动作分类：
1.处理器与存储器之间的指令或数据传送操作。
2.处理器与I/O设备之间的指令或数据传输操作。
3.算术运算操作或逻辑运算操作。
4.控制操作，修改指令的执行顺序。

程序顺序执行的特点：
顺序性、封闭性、可再现性。

程序并发执行的特点：
间断性、失去封闭性、不可再现性。

进程的特征：
并发性、动态性、独立性、异步性、结构特征：用户正文段、用户数据段和进程控制块。

进程与程序的区别：
1.程序是静态的，进程是动态的。
2.程序是永久的，进程是暂时存在的。
3.程序与进程的存在实体不同。程序是指令的集合，进程是包括了正文段、用户数据段和进程控制块的实体。

进程与程序的联系：
1.进程是程序的一次执行。
2.一个程序可以对应多个进程。

进程控制块中包含的信息：
进程标识符信息、处理机状态信息、进程调度信息、进程控制信息

进程控制块中处理机状态信息包含：
通用寄存器、指令计数器、程序状态字、用户栈指针

需要创建新进程的情况：
用户登录、作业调度、提供服务、应用请求

进程阻塞的情况：
请求系统服务器 、启动某种操作、新数据尚未达到、无新工作可做。

进程唤醒过程：
将进程从阻塞队列在移出、将进程状态由阻塞态改为就绪态、将进程插入就绪队列。

硬盘启动过程：
检测硬盘0柱面0磁道1扇区。如果该扇区以0xAA55结束，则是引导扇区。装入0000：7c00处。

资源管理包括：
进程管理、存储器管理、设备管理

中断的类型：
1.同步中断（内部中断）：CPU控制单元产生的。
2.异步中断（外部中断）：其他硬件随机产生。

PC中的时钟源分类：
实时时钟（RTC）：也称CMOS时钟，是一块时钟芯片，靠电池供电，为计算机提供计时标准。
OS时钟：产生于PC主板上的定时/计算芯片，开机时有效。

系统调用的类型：
1.进程控制类系统调用：创建、撤销进程；获得、改变进程属性。
2.文件操纵类系统调用：创建文件、删除文件、打开文件。
3.设备管理类系统调用：请求、释放设备。
4.通信类系统调用：打开、关闭连接、交换信息。

进程同步遵循的准则：
空闲让进、忙则等待、有限等待、让权等待。

管程定义：
由过程、变量、数据结构组成的集合，它们组成一个特殊的模块或软件包。

共享存储系统的类型：
1.基于共享数据结构的通信方式。
2.基于共享存储区的通信方式。

消息缓冲区的数据结构：
发送进程标识符、消息长度、消息正文、指向下一个消息缓冲区的指针

线程的终止过程：
1.根据被终止线程的标识符，从TCB集合中检索出该线程的TCB，从中读出该线程的状态。
2.若被终止线程处于运行状态，应立即终止该线程的执行，并置调度标志为真，
用于指示该线程被终止后应重新执行线程调度程序。
3.将被终止线程的TCB从所在的队列中移出，等待其他程序来搜集信息。

用户线程的阻塞过程：
1.停止线程执行，将线程的状态改为阻塞态。
2.将线程控制块插入相应的线程阻塞队列。
3.将线程所属的进程状态改为阻塞态。
4.将线程所属的进程控制块插入相应的进程阻塞队列。
5.将控制传递给进程调度程序，重新进行进程调度。

用户线程的唤醒过程：
1.将线程所属进程的状态由阻塞改为就绪。
2.将线程所属进程的进程控制块从阻塞队列中移除。
3.将线程所属进程的进程控制块插入进程就绪队列。
4.将线程状态由阻塞改为就绪。
5.将该线程的线程控制块从阻塞队列中移除。
6.将线程的线程控制块插入线程就绪队列。







